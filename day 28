Day 28 of learning javascript
Today I completed writing the javascript file for the weather app. I had written HTML and css yesterday. #day28 #60DaysOfJs #learningwithkucc


html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./style.css">
    <title>Document</title>
</head>
<body>
    <div class="card">
        <div class="search">
            <input type="text" placeholder="Enter City Name..." spellcheck="false">
            <button><img src="./images/search.png"></button>
        </div>
        <div class="weather">
            <img src="./images/rain.png" class="weather-icon">
            <h1 class="temp">22°C</h1>
            <h2 class="city">Kathmandu</h2>
            <div class="details">
                <div class="col">
                    <img src="./images/humidity.png">
                    <div><p class="humidity">50%</p>
                    <p>Humidity</p></div>
                </div>
                <div class="col">
                    <img src="./images/wind.png">
                    <div>
                        <p class="wind">15km/h</p>
                        <p>Wind Speed</p></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="./main.js"></script>
    
</body>
</html>



css
*{
    margin: 0;
    padding: 0;
    font-family: 'Poppins',sans-serif;
    box-sizing: border-box;
}

body{
    background-color: #222;
}

.card{
    width: 90%;
    max-width: 470px;
    background: linear-gradient(135deg, #00fe, #5b548a);
    color: #fff;
    margin: 100px auto 0;
    border-radius: 20px;
    padding: 40px 35px;
    text-align: center;

}

.search{
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.search input{
    border: 0;
    outline: 0;
    background: #ebfffc;
    color: #555;
    padding: 10px 25px;
    height: 60px;
    border-radius: 30px;
    flex: 1;
    margin-right: 16px;
    font-size: 18px;
}

.search button{
    border: 0;
    outline: 0;
    background: #ebfffc;
    border-radius: 50%;
    width: 60px;
    height: 60px;
    cursor: pointer;
}

.search button img{
    width: 16px;
}

.weather-icon{
    width: 170px;
    margin-top: 30px;
}

.weather h1{
    font-size: 80px;
    font-weight: 500;
}

.weather h2{
    font-size: 45px;
    font-weight: 400;
    margin-top: -10px;
}

.details{
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 20px;
    margin-top: 50px;
}

.col{
    display: flex;
    align-items: center;
    text-align: left;
}

.col img{
    width: 40px;
    margin-right:10px;
}

.humidity, .wind{
    font-size:28px;
    margin-top: -6px;
}

/* .weather{
    display: none;
} */


js
const apiKey = "3523c93df961066055c70e003bccc23f";
const apiUrl = "https://api.openweathermap.org/data/2.5/weather?units=metric&q=";

const searchBox = document.querySelector(".search input");
const searchbtn = document.querySelector(".search button");
const weatherIcon = document.querySelector(".weather-icon");

async function checkWeather(city) {

        const response = await fetch(apiUrl + city + `&appid=${apiKey}`);
        const data = await response.json();
        console.log(data);

        document.querySelector(".city").innerHTML = data.name;
        document.querySelector(".temp").innerHTML = Math.round(data.main.temp) + "°C";
        document.querySelector(".humidity").innerHTML = data.main.humidity + "%";
        document.querySelector(".wind").innerHTML = data.wind.speed + "km/h";

        switch (data.weather[0].main) {
            case "Clouds":
                weatherIcon.src = "./images/clouds.png";
                break;
            case "Clear":
                weatherIcon.src = "./images/clear.png";
                break;
            case "Rain":
                weatherIcon.src = "./images/rain.png";
                break;
            case "Drizzle":
                weatherIcon.src = "./images/drizzle.png";
                break;
            case "Mist":
                weatherIcon.src = "./images/mist.png";
                break;
            default:
                weatherIcon.src = "";
                break;
        }

}

searchbtn.addEventListener("click", () => {
    checkWeather(searchBox.value);
});

checkWeather("Kathmandu");
